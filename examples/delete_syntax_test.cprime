// Test explicit delete syntax
class ExplicitDelete {
    value: int,
    
    // Mix of default and delete - all allowed in CPrime
    ExplicitDelete() = default;                                     // Available
    ExplicitDelete(const ExplicitDelete& other) = delete;          // Explicitly deleted
    ExplicitDelete(ExplicitDelete&& other) = default;              // Available
    ExplicitDelete& operator=(const ExplicitDelete& other) = delete; // Explicitly deleted  
    ExplicitDelete& operator=(ExplicitDelete&& other) = default;   // Available
    ~ExplicitDelete() = default;                                    // Available
};

class UtilityClass {
    // Static utility class - delete all construction/destruction
    UtilityClass() = delete;
    UtilityClass(const UtilityClass& other) = delete;
    UtilityClass(UtilityClass&& other) = delete;
    UtilityClass& operator=(const UtilityClass& other) = delete;
    UtilityClass& operator=(UtilityClass&& other) = delete;
    ~UtilityClass() = delete;
};

int main() {
    print("=== Delete Syntax Test ===");
    print("ExplicitDelete class defined with mixed default/delete members");
    print("UtilityClass defined with all members deleted");
    print("CPrime allows any combination - no Rule of Five enforcement");
    print("=== Test Complete ===");
}