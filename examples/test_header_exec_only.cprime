// Parent exec alias - contains the Lua script
exec helper<...> {
    -- Lua script: analyze scope content 
    local scope_content = params[0]  -- Detokenized scope from specialization
    local analysis = params[1] or "basic"
    
    -- Count int variables in scope
    local int_count = 0
    for _ in string.gmatch(scope_content, "int%s+%w+") do
        int_count = int_count + 1
    end
    
    return "int analysis_result = " .. int_count .. "; // Found " .. int_count .. " int vars"
};

// Specialization exec alias - contains CPrime semantics, no Lua script
exec helper<...> scope_analyzer<analysis_type> {
    int var1 = 10;
    int var2 = 20;
    print("This scope has variables");
};

// USAGE: Variable declaration style with identifier and semicolon
scope_analyzer<detailed> my_analysis;

// Regular code - no exec at all
int main() {
    return 0;
}